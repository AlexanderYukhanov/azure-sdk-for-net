// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Redis
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for RedisFirewallRuleOperations.
    /// </summary>
    public static partial class RedisFirewallRuleOperationsExtensions
    {
            /// <summary>
            /// Create or update a redis cache firewall rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cacheName'>
            /// The name of the Redis cache.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the firewall rule.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update redis firewall rule operation.
            /// </param>
            public static RedisFirewallRule CreateOrUpdate(this IRedisFirewallRuleOperations operations, string resourceGroupName, string cacheName, string ruleName, RedisFirewallRule parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IRedisFirewallRuleOperations)s).CreateOrUpdateAsync(resourceGroupName, cacheName, ruleName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a redis cache firewall rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cacheName'>
            /// The name of the Redis cache.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the firewall rule.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update redis firewall rule operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RedisFirewallRule> CreateOrUpdateAsync(this IRedisFirewallRuleOperations operations, string resourceGroupName, string cacheName, string ruleName, RedisFirewallRule parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, cacheName, ruleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single firewall rule in a specified redis cache.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cacheName'>
            /// The name of the Redis cache.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the firewall rule.
            /// </param>
            public static RedisFirewallRule Get(this IRedisFirewallRuleOperations operations, string resourceGroupName, string cacheName, string ruleName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IRedisFirewallRuleOperations)s).GetAsync(resourceGroupName, cacheName, ruleName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single firewall rule in a specified redis cache.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cacheName'>
            /// The name of the Redis cache.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the firewall rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RedisFirewallRule> GetAsync(this IRedisFirewallRuleOperations operations, string resourceGroupName, string cacheName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, cacheName, ruleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a single firewall rule in a specified redis cache.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cacheName'>
            /// The name of the Redis cache.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the firewall rule.
            /// </param>
            public static void Delete(this IRedisFirewallRuleOperations operations, string resourceGroupName, string cacheName, string ruleName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IRedisFirewallRuleOperations)s).DeleteAsync(resourceGroupName, cacheName, ruleName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a single firewall rule in a specified redis cache.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cacheName'>
            /// The name of the Redis cache.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the firewall rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IRedisFirewallRuleOperations operations, string resourceGroupName, string cacheName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, cacheName, ruleName, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
