// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Analysis
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// ServersOperations operations.
    /// </summary>
    internal partial class ServersOperations : Microsoft.Rest.IServiceOperations<AnalysisServicesManagementClient>, IServersOperations
    {
        /// <summary>
        /// Initializes a new instance of the ServersOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        internal ServersOperations(AnalysisServicesManagementClient client)
        {
            if (client == null)
            {
                throw new System.ArgumentNullException("client");
            }
            this.Client = client;
        }

        /// <summary>
        /// Gets a reference to the AnalysisServicesManagementClient
        /// </summary>
        public AnalysisServicesManagementClient Client { get; private set; }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> GetDetails_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_GetDetails",
                method: "GET",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo GetDetails_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo GetDetails_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo GetDetails_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo GetDetails_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo GetDetails_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<AnalysisServicesServer>> GetDetailsWithHttpMessagesAsync(
            string resourceGroupName, string serverName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    GetDetails_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    GetDetails_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    GetDetails_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    GetDetails_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    GetDetails_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: GetDetails_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<AnalysisServicesServer>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<AnalysisServicesServer>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> Create_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_Create",
                method: "PUT",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: true);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Create_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Create_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Create_serverParameters_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverParameters",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Body,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Create_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Create_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Create_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<AnalysisServicesServer>> CreateWithHttpMessagesAsync(
            string resourceGroupName, string serverName, AnalysisServicesServer serverParameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Create_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Create_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Create_serverParameters_ParamInfo,
                    serverParameters),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Create_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Create_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Create_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: Create_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<AnalysisServicesServer>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<AnalysisServicesServer>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> Delete_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_Delete",
                method: "DELETE",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: true);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> DeleteWithHttpMessagesAsync(
            string resourceGroupName, string serverName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: Delete_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> Update_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_Update",
                method: "PATCH",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: true);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_serverUpdateParameters_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverUpdateParameters",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Body,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<AnalysisServicesServer>> UpdateWithHttpMessagesAsync(
            string resourceGroupName, string serverName, AnalysisServicesServerUpdateParameters serverUpdateParameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_serverUpdateParameters_ParamInfo,
                    serverUpdateParameters),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: Update_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<AnalysisServicesServer>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<AnalysisServicesServer>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> Suspend_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_Suspend",
                method: "POST",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/suspend", isParam: false),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: true);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Suspend_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Suspend_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Suspend_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Suspend_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Suspend_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> SuspendWithHttpMessagesAsync(
            string resourceGroupName, string serverName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Suspend_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Suspend_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Suspend_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Suspend_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Suspend_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: Suspend_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> Resume_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_Resume",
                method: "POST",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resume", isParam: false),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: true);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Resume_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Resume_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Resume_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Resume_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Resume_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> ResumeWithHttpMessagesAsync(
            string resourceGroupName, string serverName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Resume_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Resume_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Resume_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Resume_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Resume_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: Resume_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> ListByResourceGroup_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_ListByResourceGroup",
                method: "GET",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers", isParam: false),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroup_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroup_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroup_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroup_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<System.Collections.Generic.IEnumerable<AnalysisServicesServer>>> ListByResourceGroupWithHttpMessagesAsync(
            string resourceGroupName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroup_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroup_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroup_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroup_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: ListByResourceGroup_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<System.Collections.Generic.IEnumerable<AnalysisServicesServer>>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Page<AnalysisServicesServer>>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> List_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_List",
                method: "GET",
                // path = "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers", isParam: false),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo List_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo List_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo List_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<System.Collections.Generic.IEnumerable<AnalysisServicesServer>>> ListWithHttpMessagesAsync(
            System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    List_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    List_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    List_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: List_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<System.Collections.Generic.IEnumerable<AnalysisServicesServer>>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Page<AnalysisServicesServer>>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> BeginCreate_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_Create",
                method: "PUT",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginCreate_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginCreate_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginCreate_serverParameters_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverParameters",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Body,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginCreate_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginCreate_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginCreate_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<AnalysisServicesServer>> BeginCreateWithHttpMessagesAsync(
            string resourceGroupName, string serverName, AnalysisServicesServer serverParameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginCreate_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginCreate_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginCreate_serverParameters_ParamInfo,
                    serverParameters),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginCreate_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginCreate_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginCreate_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: BeginCreate_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<AnalysisServicesServer>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<AnalysisServicesServer>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> BeginDelete_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_Delete",
                method: "DELETE",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> BeginDeleteWithHttpMessagesAsync(
            string resourceGroupName, string serverName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: BeginDelete_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> BeginUpdate_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_Update",
                method: "PATCH",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginUpdate_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginUpdate_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginUpdate_serverUpdateParameters_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverUpdateParameters",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Body,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginUpdate_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginUpdate_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginUpdate_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<AnalysisServicesServer>> BeginUpdateWithHttpMessagesAsync(
            string resourceGroupName, string serverName, AnalysisServicesServerUpdateParameters serverUpdateParameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginUpdate_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginUpdate_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginUpdate_serverUpdateParameters_ParamInfo,
                    serverUpdateParameters),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginUpdate_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginUpdate_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginUpdate_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: BeginUpdate_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<AnalysisServicesServer>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<AnalysisServicesServer>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> BeginSuspend_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_Suspend",
                method: "POST",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/suspend", isParam: false),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginSuspend_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginSuspend_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginSuspend_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginSuspend_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginSuspend_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> BeginSuspendWithHttpMessagesAsync(
            string resourceGroupName, string serverName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginSuspend_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginSuspend_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginSuspend_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginSuspend_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginSuspend_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: BeginSuspend_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> BeginResume_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "AnalysisServicesManagementClient",
                id: "Servers_Resume",
                method: "POST",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.AnalysisServices/servers/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "serverName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resume", isParam: false),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginResume_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(90),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(1),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[-\w\._\(\)]+$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginResume_serverName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "serverName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMaxLength(63),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureMinLength(3),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzurePattern(@"^[a-z][a-z0-9]*$"),
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginResume_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginResume_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginResume_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> BeginResumeWithHttpMessagesAsync(
            string resourceGroupName, string serverName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginResume_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginResume_serverName_ParamInfo,
                    serverName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginResume_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginResume_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginResume_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: BeginResume_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse>());
        }

    }
}
