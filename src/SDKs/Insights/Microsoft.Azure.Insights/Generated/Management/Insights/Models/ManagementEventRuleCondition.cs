// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Insights.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Insights;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A management event rule condition.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition")]
    public partial class ManagementEventRuleCondition : RuleCondition
    {
        /// <summary>
        /// Initializes a new instance of the ManagementEventRuleCondition
        /// class.
        /// </summary>
        public ManagementEventRuleCondition()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagementEventRuleCondition
        /// class.
        /// </summary>
        /// <param name="dataSource">the resource from which the rule collects
        /// its data. For this type dataSource will always be of type
        /// RuleManagementEventDataSource.</param>
        /// <param name="aggregation">How the data that is collected should be
        /// combined over time and when the alert is activated. Note that for
        /// management event alerts aggregation is optional – if it is not
        /// provided then any event will cause the alert to activate.</param>
        public ManagementEventRuleCondition(RuleDataSource dataSource = default(RuleDataSource), ManagementEventAggregationCondition aggregation = default(ManagementEventAggregationCondition))
        {
            DataSource = dataSource;
            Aggregation = aggregation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource from which the rule collects its data.
        /// For this type dataSource will always be of type
        /// RuleManagementEventDataSource.
        /// </summary>
        [JsonProperty(PropertyName = "dataSource")]
        public RuleDataSource DataSource { get; set; }

        /// <summary>
        /// Gets or sets how the data that is collected should be combined over
        /// time and when the alert is activated. Note that for management
        /// event alerts aggregation is optional – if it is not provided then
        /// any event will cause the alert to activate.
        /// </summary>
        [JsonProperty(PropertyName = "aggregation")]
        public ManagementEventAggregationCondition Aggregation { get; set; }

    }
}
