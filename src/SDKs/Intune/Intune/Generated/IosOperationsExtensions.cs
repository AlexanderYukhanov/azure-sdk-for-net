// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Intune
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IosOperations.
    /// </summary>
    public static partial class IosOperationsExtensions
    {
            /// <summary>
            /// Returns Intune iOSPolicies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static IPage<IOSMAMPolicy> GetMAMPolicies(this IIosOperations operations, string hostName, string filter = default(string), int? top = default(int?), string select = default(string))
            {
                return operations.GetMAMPoliciesAsync(hostName, filter, top, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune iOSPolicies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IOSMAMPolicy>> GetMAMPoliciesAsync(this IIosOperations operations, string hostName, string filter = default(string), int? top = default(int?), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMAMPoliciesWithHttpMessagesAsync(hostName, filter, top, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns Intune iOS policies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static IOSMAMPolicy GetMAMPolicyByName(this IIosOperations operations, string hostName, string policyName, string select = default(string))
            {
                return operations.GetMAMPolicyByNameAsync(hostName, policyName, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune iOS policies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IOSMAMPolicy> GetMAMPolicyByNameAsync(this IIosOperations operations, string hostName, string policyName, string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMAMPolicyByNameWithHttpMessagesAsync(hostName, policyName, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update an android policy operation.
            /// </param>
            public static IOSMAMPolicy CreateOrUpdateMAMPolicy(this IIosOperations operations, string hostName, string policyName, IOSMAMPolicy parameters)
            {
                return operations.CreateOrUpdateMAMPolicyAsync(hostName, policyName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update an android policy operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IOSMAMPolicy> CreateOrUpdateMAMPolicyAsync(this IIosOperations operations, string hostName, string policyName, IOSMAMPolicy parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateMAMPolicyWithHttpMessagesAsync(hostName, policyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// patch an iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update an android policy operation.
            /// </param>
            public static IOSMAMPolicy PatchMAMPolicy(this IIosOperations operations, string hostName, string policyName, IOSMAMPolicy parameters)
            {
                return operations.PatchMAMPolicyAsync(hostName, policyName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// patch an iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update an android policy operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IOSMAMPolicy> PatchMAMPolicyAsync(this IIosOperations operations, string hostName, string policyName, IOSMAMPolicy parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchMAMPolicyWithHttpMessagesAsync(hostName, policyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Ios Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            public static void DeleteMAMPolicy(this IIosOperations operations, string hostName, string policyName)
            {
                operations.DeleteMAMPolicyAsync(hostName, policyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Ios Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMAMPolicyAsync(this IIosOperations operations, string hostName, string policyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMAMPolicyWithHttpMessagesAsync(hostName, policyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get apps for an iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static IPage<Application> GetAppForMAMPolicy(this IIosOperations operations, string hostName, string policyName, string filter = default(string), int? top = default(int?), string select = default(string))
            {
                return operations.GetAppForMAMPolicyAsync(hostName, policyName, filter, top, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get apps for an iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Application>> GetAppForMAMPolicyAsync(this IIosOperations operations, string hostName, string policyName, string filter = default(string), int? top = default(int?), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppForMAMPolicyWithHttpMessagesAsync(hostName, policyName, filter, top, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add app to an iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='appName'>
            /// application unique Name
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to add an app to an ios policy.
            /// </param>
            public static void AddAppForMAMPolicy(this IIosOperations operations, string hostName, string policyName, string appName, MAMPolicyAppIdOrGroupIdPayload parameters)
            {
                operations.AddAppForMAMPolicyAsync(hostName, policyName, appName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add app to an iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='appName'>
            /// application unique Name
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to add an app to an ios policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddAppForMAMPolicyAsync(this IIosOperations operations, string hostName, string policyName, string appName, MAMPolicyAppIdOrGroupIdPayload parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddAppForMAMPolicyWithHttpMessagesAsync(hostName, policyName, appName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete App for Ios Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='appName'>
            /// application unique Name
            /// </param>
            public static void DeleteAppForMAMPolicy(this IIosOperations operations, string hostName, string policyName, string appName)
            {
                operations.DeleteAppForMAMPolicyAsync(hostName, policyName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete App for Ios Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='appName'>
            /// application unique Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAppForMAMPolicyAsync(this IIosOperations operations, string hostName, string policyName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAppForMAMPolicyWithHttpMessagesAsync(hostName, policyName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns groups for a given iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// policy name for the tenant
            /// </param>
            public static IPage<GroupItem> GetGroupsForMAMPolicy(this IIosOperations operations, string hostName, string policyName)
            {
                return operations.GetGroupsForMAMPolicyAsync(hostName, policyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns groups for a given iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// policy name for the tenant
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GroupItem>> GetGroupsForMAMPolicyAsync(this IIosOperations operations, string hostName, string policyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsForMAMPolicyWithHttpMessagesAsync(hostName, policyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add group to an iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='groupId'>
            /// group Id
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update app to an android policy
            /// operation.
            /// </param>
            public static void AddGroupForMAMPolicy(this IIosOperations operations, string hostName, string policyName, string groupId, MAMPolicyAppIdOrGroupIdPayload parameters)
            {
                operations.AddGroupForMAMPolicyAsync(hostName, policyName, groupId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add group to an iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='groupId'>
            /// group Id
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update app to an android policy
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddGroupForMAMPolicyAsync(this IIosOperations operations, string hostName, string policyName, string groupId, MAMPolicyAppIdOrGroupIdPayload parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddGroupForMAMPolicyWithHttpMessagesAsync(hostName, policyName, groupId, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete Group for iOS Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='groupId'>
            /// application unique Name
            /// </param>
            public static void DeleteGroupForMAMPolicy(this IIosOperations operations, string hostName, string policyName, string groupId)
            {
                operations.DeleteGroupForMAMPolicyAsync(hostName, policyName, groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Group for iOS Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='groupId'>
            /// application unique Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGroupForMAMPolicyAsync(this IIosOperations operations, string hostName, string policyName, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGroupForMAMPolicyWithHttpMessagesAsync(hostName, policyName, groupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns Intune iOSPolicies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IOSMAMPolicy> GetMAMPoliciesNext(this IIosOperations operations, string nextPageLink)
            {
                return operations.GetMAMPoliciesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune iOSPolicies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IOSMAMPolicy>> GetMAMPoliciesNextAsync(this IIosOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMAMPoliciesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get apps for an iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Application> GetAppForMAMPolicyNext(this IIosOperations operations, string nextPageLink)
            {
                return operations.GetAppForMAMPolicyNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get apps for an iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Application>> GetAppForMAMPolicyNextAsync(this IIosOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppForMAMPolicyNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns groups for a given iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<GroupItem> GetGroupsForMAMPolicyNext(this IIosOperations operations, string nextPageLink)
            {
                return operations.GetGroupsForMAMPolicyNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns groups for a given iOSMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GroupItem>> GetGroupsForMAMPolicyNextAsync(this IIosOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsForMAMPolicyNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
