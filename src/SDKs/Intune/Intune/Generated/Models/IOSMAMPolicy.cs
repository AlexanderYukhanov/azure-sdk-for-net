// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Intune.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Intune;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// iOS Policy entity for Intune MAM.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class IOSMAMPolicy : Resource
    {
        /// <summary>
        /// Initializes a new instance of the IOSMAMPolicy class.
        /// </summary>
        public IOSMAMPolicy()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IOSMAMPolicy class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource Tags</param>
        /// <param name="location">Resource Location</param>
        /// <param name="appSharingFromLevel">Possible values include: 'none',
        /// 'policyManagedApps', 'allApps'</param>
        /// <param name="appSharingToLevel">Possible values include: 'none',
        /// 'policyManagedApps', 'allApps'</param>
        /// <param name="authentication">Possible values include: 'required',
        /// 'notRequired'</param>
        /// <param name="clipboardSharingLevel">Possible values include:
        /// 'blocked', 'policyManagedApps', 'policyManagedAppsWithPasteIn',
        /// 'allApps'</param>
        /// <param name="dataBackup">Possible values include: 'allow',
        /// 'block'</param>
        /// <param name="fileSharingSaveAs">Possible values include: 'allow',
        /// 'block'</param>
        /// <param name="pin">Possible values include: 'required',
        /// 'notRequired'</param>
        /// <param name="deviceCompliance">Possible values include: 'enable',
        /// 'disable'</param>
        /// <param name="managedBrowser">Possible values include: 'required',
        /// 'notRequired'</param>
        /// <param name="groupStatus">Possible values include: 'notTargeted',
        /// 'targeted'</param>
        /// <param name="fileEncryptionLevel">Possible values include:
        /// 'deviceLocked', 'deviceLockedExceptFilesOpen',
        /// 'afterDeviceRestart', 'useDeviceSettings'</param>
        /// <param name="touchId">Possible values include: 'enable',
        /// 'disable'</param>
        public IOSMAMPolicy(string friendlyName, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string location = default(string), string description = default(string), string appSharingFromLevel = default(string), string appSharingToLevel = default(string), string authentication = default(string), string clipboardSharingLevel = default(string), string dataBackup = default(string), string fileSharingSaveAs = default(string), string pin = default(string), int? pinNumRetry = default(int?), string deviceCompliance = default(string), string managedBrowser = default(string), System.TimeSpan? accessRecheckOfflineTimeout = default(System.TimeSpan?), System.TimeSpan? accessRecheckOnlineTimeout = default(System.TimeSpan?), System.TimeSpan? offlineWipeTimeout = default(System.TimeSpan?), int? numOfApps = default(int?), string groupStatus = default(string), System.DateTime? lastModifiedTime = default(System.DateTime?), string fileEncryptionLevel = default(string), string touchId = default(string))
            : base(id, name, type, tags, location)
        {
            FriendlyName = friendlyName;
            Description = description;
            AppSharingFromLevel = appSharingFromLevel;
            AppSharingToLevel = appSharingToLevel;
            Authentication = authentication;
            ClipboardSharingLevel = clipboardSharingLevel;
            DataBackup = dataBackup;
            FileSharingSaveAs = fileSharingSaveAs;
            Pin = pin;
            PinNumRetry = pinNumRetry;
            DeviceCompliance = deviceCompliance;
            ManagedBrowser = managedBrowser;
            AccessRecheckOfflineTimeout = accessRecheckOfflineTimeout;
            AccessRecheckOnlineTimeout = accessRecheckOnlineTimeout;
            OfflineWipeTimeout = offlineWipeTimeout;
            NumOfApps = numOfApps;
            GroupStatus = groupStatus;
            LastModifiedTime = lastModifiedTime;
            FileEncryptionLevel = fileEncryptionLevel;
            TouchId = touchId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'none', 'policyManagedApps',
        /// 'allApps'
        /// </summary>
        [JsonProperty(PropertyName = "properties.appSharingFromLevel")]
        public string AppSharingFromLevel { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'none', 'policyManagedApps',
        /// 'allApps'
        /// </summary>
        [JsonProperty(PropertyName = "properties.appSharingToLevel")]
        public string AppSharingToLevel { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'required', 'notRequired'
        /// </summary>
        [JsonProperty(PropertyName = "properties.authentication")]
        public string Authentication { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'blocked',
        /// 'policyManagedApps', 'policyManagedAppsWithPasteIn', 'allApps'
        /// </summary>
        [JsonProperty(PropertyName = "properties.clipboardSharingLevel")]
        public string ClipboardSharingLevel { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'allow', 'block'
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataBackup")]
        public string DataBackup { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'allow', 'block'
        /// </summary>
        [JsonProperty(PropertyName = "properties.fileSharingSaveAs")]
        public string FileSharingSaveAs { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'required', 'notRequired'
        /// </summary>
        [JsonProperty(PropertyName = "properties.pin")]
        public string Pin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.pinNumRetry")]
        public int? PinNumRetry { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'enable', 'disable'
        /// </summary>
        [JsonProperty(PropertyName = "properties.deviceCompliance")]
        public string DeviceCompliance { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'required', 'notRequired'
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedBrowser")]
        public string ManagedBrowser { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.accessRecheckOfflineTimeout")]
        public System.TimeSpan? AccessRecheckOfflineTimeout { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.accessRecheckOnlineTimeout")]
        public System.TimeSpan? AccessRecheckOnlineTimeout { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.offlineWipeTimeout")]
        public System.TimeSpan? OfflineWipeTimeout { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.numOfApps")]
        public int? NumOfApps { get; private set; }

        /// <summary>
        /// Gets possible values include: 'notTargeted', 'targeted'
        /// </summary>
        [JsonProperty(PropertyName = "properties.groupStatus")]
        public string GroupStatus { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedTime")]
        public System.DateTime? LastModifiedTime { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'deviceLocked',
        /// 'deviceLockedExceptFilesOpen', 'afterDeviceRestart',
        /// 'useDeviceSettings'
        /// </summary>
        [JsonProperty(PropertyName = "properties.fileEncryptionLevel")]
        public string FileEncryptionLevel { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'enable', 'disable'
        /// </summary>
        [JsonProperty(PropertyName = "properties.touchId")]
        public string TouchId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FriendlyName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FriendlyName");
            }
        }
    }
}
