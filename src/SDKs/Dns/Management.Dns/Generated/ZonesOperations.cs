// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Dns
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// ZonesOperations operations.
    /// </summary>
    internal partial class ZonesOperations : Microsoft.Rest.IServiceOperations<DnsManagementClient>, IZonesOperations
    {
        /// <summary>
        /// Initializes a new instance of the ZonesOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        internal ZonesOperations(DnsManagementClient client)
        {
            if (client == null)
            {
                throw new System.ArgumentNullException("client");
            }
            this.Client = client;
        }

        /// <summary>
        /// Gets a reference to the DnsManagementClient
        /// </summary>
        public DnsManagementClient Client { get; private set; }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> CreateOrUpdate_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "Zones_CreateOrUpdate",
                method: "PUT",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "zoneName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_zoneName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "zoneName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_parameters_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "parameters",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Body,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_If_Match_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "If-Match",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_If_None_Match_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "If-None-Match",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Zone>> CreateOrUpdateWithHttpMessagesAsync(
            string resourceGroupName, string zoneName, Zone parameters, string ifMatch = default(string), string ifNoneMatch = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_zoneName_ParamInfo,
                    zoneName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_parameters_ParamInfo,
                    parameters),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_If_Match_ParamInfo,
                    ifMatch),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_If_None_Match_ParamInfo,
                    ifNoneMatch),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: CreateOrUpdate_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<Zone>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Zone>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> Delete_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "Zones_Delete",
                method: "DELETE",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "zoneName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: true);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_zoneName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "zoneName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_If_Match_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "If-Match",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<ZoneDeleteResult>> DeleteWithHttpMessagesAsync(
            string resourceGroupName, string zoneName, string ifMatch = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_zoneName_ParamInfo,
                    zoneName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_If_Match_ParamInfo,
                    ifMatch),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: Delete_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<ZoneDeleteResult>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<ZoneDeleteResult>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> Get_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "Zones_Get",
                method: "GET",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "zoneName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_zoneName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "zoneName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Zone>> GetWithHttpMessagesAsync(
            string resourceGroupName, string zoneName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_zoneName_ParamInfo,
                    zoneName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: Get_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<Zone>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Zone>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> ListByResourceGroup_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "Zones_ListByResourceGroup",
                method: "GET",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones", isParam: false),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroup_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroup__top_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "$top",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroup_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroup_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroup_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<Zone>>> ListByResourceGroupWithHttpMessagesAsync(
            string resourceGroupName, int? top = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroup_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroup__top_ParamInfo,
                    top),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroup_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroup_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroup_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: ListByResourceGroup_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<Zone>>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Page<Zone>>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> List_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "Zones_List",
                method: "GET",
                // path = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/dnszones"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnszones", isParam: false),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo List__top_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "$top",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo List_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo List_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo List_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<Zone>>> ListWithHttpMessagesAsync(
            int? top = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    List__top_ParamInfo,
                    top),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    List_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    List_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    List_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: List_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<Zone>>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Page<Zone>>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> BeginDelete_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "Zones_Delete",
                method: "DELETE",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "zoneName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_zoneName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "zoneName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_If_Match_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "If-Match",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo BeginDelete_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<ZoneDeleteResult>> BeginDeleteWithHttpMessagesAsync(
            string resourceGroupName, string zoneName, string ifMatch = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_zoneName_ParamInfo,
                    zoneName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_If_Match_ParamInfo,
                    ifMatch),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    BeginDelete_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: BeginDelete_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<ZoneDeleteResult>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<ZoneDeleteResult>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> ListByResourceGroupNext_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "Zones_ListByResourceGroup",
                method: "GET",
                // path = "{nextLink}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "nextLink", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroupNext_nextLink_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "nextLink",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByResourceGroupNext_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<Zone>>> ListByResourceGroupNextWithHttpMessagesAsync(
            string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroupNext_nextLink_ParamInfo,
                    nextPageLink),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByResourceGroupNext_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: ListByResourceGroupNext_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<Zone>>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Page<Zone>>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> ListNext_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "Zones_List",
                method: "GET",
                // path = "{nextLink}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "nextLink", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListNext_nextLink_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "nextLink",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListNext_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<Zone>>> ListNextWithHttpMessagesAsync(
            string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListNext_nextLink_ParamInfo,
                    nextPageLink),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListNext_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: ListNext_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<Zone>>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Page<Zone>>());
        }

    }
}
