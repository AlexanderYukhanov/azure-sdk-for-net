// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Dns
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// RecordSetsOperations operations.
    /// </summary>
    internal partial class RecordSetsOperations : Microsoft.Rest.IServiceOperations<DnsManagementClient>, IRecordSetsOperations
    {
        /// <summary>
        /// Initializes a new instance of the RecordSetsOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        internal RecordSetsOperations(DnsManagementClient client)
        {
            if (client == null)
            {
                throw new System.ArgumentNullException("client");
            }
            this.Client = client;
        }

        /// <summary>
        /// Gets a reference to the DnsManagementClient
        /// </summary>
        public DnsManagementClient Client { get; private set; }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> Update_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "RecordSets_Update",
                method: "PATCH",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "zoneName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "recordType", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "relativeRecordSetName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_zoneName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "zoneName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_relativeRecordSetName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "relativeRecordSetName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_recordType_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "recordType",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_parameters_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "parameters",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Body,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_If_Match_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "If-Match",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Update_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<RecordSet>> UpdateWithHttpMessagesAsync(
            string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, RecordSet parameters, string ifMatch = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_zoneName_ParamInfo,
                    zoneName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_relativeRecordSetName_ParamInfo,
                    relativeRecordSetName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_recordType_ParamInfo,
                    recordType),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_parameters_ParamInfo,
                    parameters),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_If_Match_ParamInfo,
                    ifMatch),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Update_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: Update_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<RecordSet>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<RecordSet>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> CreateOrUpdate_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "RecordSets_CreateOrUpdate",
                method: "PUT",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "zoneName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "recordType", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "relativeRecordSetName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_zoneName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "zoneName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_relativeRecordSetName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "relativeRecordSetName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_recordType_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "recordType",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_parameters_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "parameters",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Body,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_If_Match_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "If-Match",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_If_None_Match_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "If-None-Match",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo CreateOrUpdate_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<RecordSet>> CreateOrUpdateWithHttpMessagesAsync(
            string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, RecordSet parameters, string ifMatch = default(string), string ifNoneMatch = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_zoneName_ParamInfo,
                    zoneName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_relativeRecordSetName_ParamInfo,
                    relativeRecordSetName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_recordType_ParamInfo,
                    recordType),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_parameters_ParamInfo,
                    parameters),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_If_Match_ParamInfo,
                    ifMatch),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_If_None_Match_ParamInfo,
                    ifNoneMatch),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    CreateOrUpdate_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: CreateOrUpdate_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<RecordSet>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<RecordSet>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> Delete_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "RecordSets_Delete",
                method: "DELETE",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "zoneName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "recordType", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "relativeRecordSetName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_zoneName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "zoneName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_relativeRecordSetName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "relativeRecordSetName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_recordType_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "recordType",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_If_Match_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "If-Match",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Delete_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> DeleteWithHttpMessagesAsync(
            string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, string ifMatch = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_zoneName_ParamInfo,
                    zoneName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_relativeRecordSetName_ParamInfo,
                    relativeRecordSetName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_recordType_ParamInfo,
                    recordType),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_If_Match_ParamInfo,
                    ifMatch),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Delete_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: Delete_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> Get_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "RecordSets_Get",
                method: "GET",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "zoneName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "recordType", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "relativeRecordSetName", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_zoneName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "zoneName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_relativeRecordSetName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "relativeRecordSetName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_recordType_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "recordType",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo Get_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<RecordSet>> GetWithHttpMessagesAsync(
            string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_zoneName_ParamInfo,
                    zoneName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_relativeRecordSetName_ParamInfo,
                    relativeRecordSetName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_recordType_ParamInfo,
                    recordType),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    Get_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: Get_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<RecordSet>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<RecordSet>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> ListByType_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "RecordSets_ListByType",
                method: "GET",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "zoneName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "recordType", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByType_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByType_zoneName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "zoneName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByType_recordType_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "recordType",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByType__top_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "$top",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByType__recordsetnamesuffix_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "$recordsetnamesuffix",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByType_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByType_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByType_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<RecordSet>>> ListByTypeWithHttpMessagesAsync(
            string resourceGroupName, string zoneName, RecordType recordType, int? top = default(int?), string recordsetnamesuffix = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByType_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByType_zoneName_ParamInfo,
                    zoneName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByType_recordType_ParamInfo,
                    recordType),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByType__top_ParamInfo,
                    top),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByType__recordsetnamesuffix_ParamInfo,
                    recordsetnamesuffix),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByType_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByType_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByType_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: ListByType_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<RecordSet>>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Page<RecordSet>>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> ListByDnsZone_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "RecordSets_ListByDnsZone",
                method: "GET",
                // path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/recordsets"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/subscriptions/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "subscriptionId", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/resourceGroups/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "resourceGroupName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/providers/Microsoft.Network/dnsZones/", isParam: false),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "zoneName", isParam: true),
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "/recordsets", isParam: false),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByDnsZone_resourceGroupName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "resourceGroupName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByDnsZone_zoneName_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "zoneName",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByDnsZone__top_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "$top",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByDnsZone__recordsetnamesuffix_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "$recordsetnamesuffix",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByDnsZone_api_version_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "api-version",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Query,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByDnsZone_subscriptionId_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "subscriptionId",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByDnsZone_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<RecordSet>>> ListByDnsZoneWithHttpMessagesAsync(
            string resourceGroupName, string zoneName, int? top = default(int?), string recordsetnamesuffix = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByDnsZone_resourceGroupName_ParamInfo,
                    resourceGroupName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByDnsZone_zoneName_ParamInfo,
                    zoneName),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByDnsZone__top_ParamInfo,
                    top),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByDnsZone__recordsetnamesuffix_ParamInfo,
                    recordsetnamesuffix),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByDnsZone_api_version_ParamInfo,
                    this.Client.ApiVersion),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByDnsZone_subscriptionId_ParamInfo,
                    this.Client.SubscriptionId),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByDnsZone_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: ListByDnsZone_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<RecordSet>>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Page<RecordSet>>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> ListByTypeNext_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "RecordSets_ListByType",
                method: "GET",
                // path = "{nextLink}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "nextLink", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByTypeNext_nextLink_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "nextLink",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByTypeNext_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<RecordSet>>> ListByTypeNextWithHttpMessagesAsync(
            string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByTypeNext_nextLink_ParamInfo,
                    nextPageLink),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByTypeNext_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: ListByTypeNext_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<RecordSet>>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Page<RecordSet>>());
        }

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError> ListByDnsZoneNext_RequestInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo<CloudError>(
                title: "DnsManagementClient",
                id: "RecordSets_ListByDnsZone",
                method: "GET",
                // path = "{nextLink}"
                path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
                {
                    new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "nextLink", isParam: true),
                },
                constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
                {
                },
                createException: error => new Microsoft.Rest.Azure.CloudException(error.Message)
                {
                    Request = error.Request,
                    Response = error.Response,
                    Body = error.Body,
                },
                isLongRunningOperation: false);

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByDnsZoneNext_nextLink_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "nextLink",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Path,
                isRequired: true,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo ListByDnsZoneNext_accept_language_ParamInfo =
            new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                name: "accept-language",
                location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.Header,
                isRequired: false,
                constraints: new Microsoft.Rest.ClientRuntime.Test.Azure.Constraints.AzureConstraint[]
                {
                });

        public System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<RecordSet>>> ListByDnsZoneNextWithHttpMessagesAsync(
            string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
            {
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByDnsZoneNext_nextLink_ParamInfo,
                    nextPageLink),
                new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                    ListByDnsZoneNext_accept_language_ParamInfo,
                    this.Client.AcceptLanguage),
            };
            var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest<CloudError>(
                info: ListByDnsZoneNext_RequestInfo,
                baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
                paramList: params_,
                customHeaders: customHeaders,
                cancellationToken: cancellationToken);
            return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
                this.Client,
                operation_,
                        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<RecordSet>>>(),
                new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<Page<RecordSet>>());
        }

    }
}
