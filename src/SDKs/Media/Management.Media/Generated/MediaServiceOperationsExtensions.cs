// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Media
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for MediaServiceOperations.
    /// </summary>
    public static partial class MediaServiceOperationsExtensions
    {
            /// <summary>
            /// Checks whether the Media Service resource name is available. The name must
            /// be globally unique.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the resource. A name must be globally unique.
            /// </param>
            /// <param name='type'>
            /// The type of the resource - mediaservices. Possible values include:
            /// 'mediaservices'
            /// </param>
            public static CheckNameAvailabilityOutput CheckNameAvailability(this IMediaServiceOperations operations, string name, ResourceType type)
            {
                return Task.Factory.StartNew(s => ((IMediaServiceOperations)s).CheckNameAvailabilityAsync(name, type), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks whether the Media Service resource name is available. The name must
            /// be globally unique.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the resource. A name must be globally unique.
            /// </param>
            /// <param name='type'>
            /// The type of the resource - mediaservices. Possible values include:
            /// 'mediaservices'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityOutput> CheckNameAvailabilityAsync(this IMediaServiceOperations operations, string name, ResourceType type, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(name, type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the Media Services in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<MediaService> ListByResourceGroup(this IMediaServiceOperations operations)
            {
                return Task.Factory.StartNew(s => ((IMediaServiceOperations)s).ListByResourceGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the Media Services in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<MediaService>> ListByResourceGroupAsync(this IMediaServiceOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MediaService Get(this IMediaServiceOperations operations)
            {
                return Task.Factory.StartNew(s => ((IMediaServiceOperations)s).GetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> GetAsync(this IMediaServiceOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mediaService'>
            /// Media Service properties needed for creation.
            /// </param>
            public static MediaService Create(this IMediaServiceOperations operations, MediaService mediaService)
            {
                return Task.Factory.StartNew(s => ((IMediaServiceOperations)s).CreateAsync(mediaService), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mediaService'>
            /// Media Service properties needed for creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> CreateAsync(this IMediaServiceOperations operations, MediaService mediaService, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(mediaService, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Delete(this IMediaServiceOperations operations)
            {
                Task.Factory.StartNew(s => ((IMediaServiceOperations)s).DeleteAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IMediaServiceOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mediaService'>
            /// Media Service properties needed for update.
            /// </param>
            public static MediaService Update(this IMediaServiceOperations operations, MediaService mediaService)
            {
                return Task.Factory.StartNew(s => ((IMediaServiceOperations)s).UpdateAsync(mediaService), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mediaService'>
            /// Media Service properties needed for update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> UpdateAsync(this IMediaServiceOperations operations, MediaService mediaService, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(mediaService, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerates a primary or secondary key for a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyType'>
            /// The keyType indicating which key you want to regenerate, Primary or
            /// Secondary. Possible values include: 'Primary', 'Secondary'
            /// </param>
            public static RegenerateKeyOutput RegenerateKey(this IMediaServiceOperations operations, KeyType keyType)
            {
                return Task.Factory.StartNew(s => ((IMediaServiceOperations)s).RegenerateKeyAsync(keyType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerates a primary or secondary key for a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyType'>
            /// The keyType indicating which key you want to regenerate, Primary or
            /// Secondary. Possible values include: 'Primary', 'Secondary'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegenerateKeyOutput> RegenerateKeyAsync(this IMediaServiceOperations operations, KeyType keyType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateKeyWithHttpMessagesAsync(keyType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the keys for a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ServiceKeys ListKeys(this IMediaServiceOperations operations)
            {
                return Task.Factory.StartNew(s => ((IMediaServiceOperations)s).ListKeysAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the keys for a Media Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceKeys> ListKeysAsync(this IMediaServiceOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Synchronizes storage account keys for a storage account associated with
            /// the Media Service account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the storage account resource.
            /// </param>
            public static void SyncStorageKeys(this IMediaServiceOperations operations, string id)
            {
                Task.Factory.StartNew(s => ((IMediaServiceOperations)s).SyncStorageKeysAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Synchronizes storage account keys for a storage account associated with
            /// the Media Service account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the storage account resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SyncStorageKeysAsync(this IMediaServiceOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SyncStorageKeysWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
